rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function validVoteState() {
      return request.resource.data.state == -1 || request.resource.data.state == 0 || request.resource.data.state == 1;
    }
    
    match /questions/{questionId}/answers/{answerId} {
      allow update: if get(/databases/$(database)/documents/questions/$(questionId)).data.author.userUid == request.auth.uid;
    }

    match /questions/{questionId}/votes/{userUid} {
      allow read;
      allow create: if request.auth != null;
      allow write: if userUid == request.auth.uid && validVoteState();
      allow delete: if userUid == request.auth.uid
    }
    match /questions/{questionId}/questionComments/{commentId}/votes/{userUid} {
      allow read;
      allow create: if request.auth != null;
      allow write: if userUid == request.auth.uid && validVoteState();
      allow delete: if userUid == request.auth.uid
    }
    match /questions/{questionId}/answers/{answerId}/votes/{userUid} {
      allow read;
      allow create: if request.auth != null;
      allow write: if userUid == request.auth.uid && validVoteState();
      allow delete: if userUid == request.auth.uid
    }
    match /questions/{questionId}/answers/{answerId}/answerComments/{commentId}/votes/{userUid} {
      allow read;
      allow create: if request.auth != null;
      allow write: if userUid == request.auth.uid && validVoteState();
      allow delete: if userUid == request.auth.uid
    }

    match /questions/{questionId}/{document=**} {
      allow read;
      allow create: if request.auth != null;
      allow write: if resource.data.author.userUid == request.auth.uid;
    }

    match /users/{userUid}/inbox/{document=**} {
      allow read: if userUid == request.auth.uid;
      allow update: if userUid == request.auth.uid
    }

    match /displayNames/{displayName} {
      allow read;
    }
  }
}